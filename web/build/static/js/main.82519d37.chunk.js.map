{"version":3,"sources":["components/Row.js","utilities/quoter.js","components/Planner.js","components/Title.js","App.js","serviceWorker.js","index.js"],"names":["_calcActualPercent","row","_getHoldingsValue","totalValue","marketValue","shares","toFixed","Row","props","symbol","targetPercent","https","require","getQuote","a","url","_generateUrl","function","apikey","_get","response","console","log","JSON","stringify","error","Promise","resolve","reject","get","res","setEncoding","rawData","on","d","parse","err","baseUrl","queryParams","queryString","param","slice","_generatePlanner","rows","planner","plannerPromises","map","id","push","key","_getTotalValue","all","reduce","Planner","useState","setRows","useEffect","test","getRows","Title","className","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.82519d37.chunk.js","sourcesContent":["import React from 'react';\n\nconst Row = (props) => {\n    return (\n        <tr>\n            <td>{props.symbol}</td>\n            <td>{props.marketValue}</td>\n            <td>{props.targetPercent}</td>\n            <td>{props.shares}</td>\n            <td>{_getHoldingsValue(props)}</td>\n            <td>{_calcActualPercent(props)}</td>\n        </tr>\n    )\n}\n\nconst _calcActualPercent = (row) => {\n    return _getHoldingsValue(row) / row.totalValue;\n}\n\nconst _getHoldingsValue = (row) => {\n    let value = row.marketValue * row.shares;\n    return value.toFixed(2);\n}\n\nexport default Row;","const https = require('https');\n\nconst apikey = 'XC57O6RNEI6T5EUQ';\n\nconst getQuote = async (symbol) => {\n    try {\n        const url = _generateUrl('https://www.alphavantage.co', {\n            function: 'GLOBAL_QUOTE',\n            symbol: symbol,\n            apikey: apikey\n        });\n        const response = await _get(url);\n        console.log(`quote.getQuote - response: ${JSON.stringify(response)}`);\n        console.log(response['Global Quote']['05. price']);\n        return response['Global Quote']['05. price'];\n    } catch (err) {\n        console.error(`quote.getQuote - error: ${err}`);\n        throw err;\n    }\n}\n\nconst _get = (url) => {\n    return new Promise((resolve, reject) => {\n        https.get(url, (res) => {\n            res.setEncoding('utf-8');\n            let rawData = '';\n            res.on('data', (d) => {\n                rawData += d;\n            });\n            res.on('end', () => {\n                resolve(JSON.parse(rawData));\n            });\n        }).on('error', (err) => {\n            console.error(`quote._get - error: ${err}`);\n            reject(err);\n        });\n    })\n}\n\nconst _generateUrl = (baseUrl, queryParams) => {\n    let queryString = `${baseUrl}/query?`;\n    for (let param in queryParams) {\n        queryString += `${param}=${queryParams[param]}&`;\n    }\n    console.log(queryString.slice(0, -1));\n    return queryString.slice(0, -1);\n}\n\nexport default getQuote;","import React, { useEffect, useState } from 'react';\nimport Row from './Row';\nimport getQuote from '../utilities/quoter';\n\nconst Planner = () => {\n    const [rows, setRows] = useState([]);\n\n    useEffect(() => {\n        const getRows = async () => {\n            let planner = await _generatePlanner(test);\n            setRows(planner);\n        };\n        getRows();\n    }, []);\n\n    return (\n        <table>\n            <thead>\n                <tr>\n                    <th>Symbol</th>\n                    <th>Market Value</th>\n                    <th>Target %</th>\n                    <th>Current Shares</th>\n                    <th>Holdings Value</th>\n                    <th>Actual %</th>\n                </tr>\n            </thead>\n            <tbody>\n                {rows}\n            </tbody>\n        </table>\n    );\n};\n\nconst _generatePlanner = async (rows) => {\n    const planner = [];\n    let plannerPromises = rows.map(async (row, id) => {\n        let marketValue = await getQuote(row.symbol);\n        planner.push(\n            <Row\n                key={id}\n                symbol={row.symbol}\n                marketValue={marketValue}\n                targetPercent={row.targetPercent}\n                shares={row.shares}\n                totalValue={_getTotalValue(rows)}\n            />\n        );\n    });\n    await Promise.all(plannerPromises);\n    return planner;\n};\n\nconst _getTotalValue = (rows) => {\n    return rows.reduce((totalValue, row) => {\n        return totalValue += (row.shares * row.marketValue);\n    }, 0);\n}\n\nexport default Planner;","import React from 'react';\n\nconst Title = () => {\n    return (\n        <div className=\"Title\">\n            <h1>ConFinPlan</h1>\n        </div>\n    );\n}\n\nexport default Title;","import React from 'react';\nimport Planner from './components/Planner';\nimport Title from './components/Title';\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Title/>\n      <Planner/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}